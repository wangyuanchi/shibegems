services:
  bot:
    build:
      context: ./bot
    env_file:
      - ./bot/.env
    depends_on: # Condition to satisfy before running CMD
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped # Use "no" for debugging

  pipeline:
    build:
      context: ./pipeline
    env_file:
      - ./pipeline/.env
    depends_on: # Condition to satisfy before running CMD
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped # Use "no" for debugging

  redis:
    image: redis:8-alpine
    container_name: shibegems-redis-1
    ports:
      - "6380:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  postgres:
    image: postgres:17-alpine
    container_name: shibegems-postgres-1
    env_file:
      - ./.env
    ports:
      - "5433:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", 'pg_isready -U "$${POSTGRES_USER}"']
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 30s
    restart: unless-stopped

volumes:
  redis-data:
  postgres-data:
