// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: gems.sql

package postgres

import (
	"context"
)

const createGems = `-- name: CreateGems :exec
INSERT INTO gems (user_id, guild_id)
VALUES ($1, $2)
ON CONFLICT (user_id, guild_id) DO NOTHING
`

type CreateGemsParams struct {
	UserID  int64
	GuildID int64
}

func (q *Queries) CreateGems(ctx context.Context, arg CreateGemsParams) error {
	_, err := q.db.Exec(ctx, createGems, arg.UserID, arg.GuildID)
	return err
}

const updateAllGems = `-- name: UpdateAllGems :one
UPDATE gems
SET
  diamond = diamond + $3,
  sunstone = sunstone + $4,
  citrine = citrine + $5,
  topaz = topaz + $6,
  peridot = peridot + $7,
  jade = jade + $8,
  aquamarine = aquamarine + $9,
  sapphire = sapphire + $10,
  amethyst = amethyst + $11,
  kunzite = kunzite + $12,
  ruby = ruby + $13,
  garnet = garnet + $14,
  painite = painite + $15
WHERE user_id = $1 AND guild_id = $2
RETURNING user_id, guild_id, diamond, sunstone, citrine, topaz, peridot, jade, aquamarine, sapphire, amethyst, kunzite, ruby, garnet, painite
`

type UpdateAllGemsParams struct {
	UserID     int64
	GuildID    int64
	Diamond    int32
	Sunstone   int32
	Citrine    int32
	Topaz      int32
	Peridot    int32
	Jade       int32
	Aquamarine int32
	Sapphire   int32
	Amethyst   int32
	Kunzite    int32
	Ruby       int32
	Garnet     int32
	Painite    int32
}

func (q *Queries) UpdateAllGems(ctx context.Context, arg UpdateAllGemsParams) (Gem, error) {
	row := q.db.QueryRow(ctx, updateAllGems,
		arg.UserID,
		arg.GuildID,
		arg.Diamond,
		arg.Sunstone,
		arg.Citrine,
		arg.Topaz,
		arg.Peridot,
		arg.Jade,
		arg.Aquamarine,
		arg.Sapphire,
		arg.Amethyst,
		arg.Kunzite,
		arg.Ruby,
		arg.Garnet,
		arg.Painite,
	)
	var i Gem
	err := row.Scan(
		&i.UserID,
		&i.GuildID,
		&i.Diamond,
		&i.Sunstone,
		&i.Citrine,
		&i.Topaz,
		&i.Peridot,
		&i.Jade,
		&i.Aquamarine,
		&i.Sapphire,
		&i.Amethyst,
		&i.Kunzite,
		&i.Ruby,
		&i.Garnet,
		&i.Painite,
	)
	return i, err
}

const updateAmethyst = `-- name: UpdateAmethyst :one
UPDATE gems
SET amethyst = amethyst + $3
WHERE user_id = $1 AND guild_id = $2
RETURNING user_id, guild_id, amethyst
`

type UpdateAmethystParams struct {
	UserID   int64
	GuildID  int64
	Amethyst int32
}

type UpdateAmethystRow struct {
	UserID   int64
	GuildID  int64
	Amethyst int32
}

func (q *Queries) UpdateAmethyst(ctx context.Context, arg UpdateAmethystParams) (UpdateAmethystRow, error) {
	row := q.db.QueryRow(ctx, updateAmethyst, arg.UserID, arg.GuildID, arg.Amethyst)
	var i UpdateAmethystRow
	err := row.Scan(&i.UserID, &i.GuildID, &i.Amethyst)
	return i, err
}

const updateAquamarine = `-- name: UpdateAquamarine :one
UPDATE gems
SET aquamarine = aquamarine + $3
WHERE user_id = $1 AND guild_id = $2
RETURNING user_id, guild_id, aquamarine
`

type UpdateAquamarineParams struct {
	UserID     int64
	GuildID    int64
	Aquamarine int32
}

type UpdateAquamarineRow struct {
	UserID     int64
	GuildID    int64
	Aquamarine int32
}

func (q *Queries) UpdateAquamarine(ctx context.Context, arg UpdateAquamarineParams) (UpdateAquamarineRow, error) {
	row := q.db.QueryRow(ctx, updateAquamarine, arg.UserID, arg.GuildID, arg.Aquamarine)
	var i UpdateAquamarineRow
	err := row.Scan(&i.UserID, &i.GuildID, &i.Aquamarine)
	return i, err
}

const updateCitrine = `-- name: UpdateCitrine :one
UPDATE gems
SET citrine = citrine + $3
WHERE user_id = $1 AND guild_id = $2
RETURNING user_id, guild_id, citrine
`

type UpdateCitrineParams struct {
	UserID  int64
	GuildID int64
	Citrine int32
}

type UpdateCitrineRow struct {
	UserID  int64
	GuildID int64
	Citrine int32
}

func (q *Queries) UpdateCitrine(ctx context.Context, arg UpdateCitrineParams) (UpdateCitrineRow, error) {
	row := q.db.QueryRow(ctx, updateCitrine, arg.UserID, arg.GuildID, arg.Citrine)
	var i UpdateCitrineRow
	err := row.Scan(&i.UserID, &i.GuildID, &i.Citrine)
	return i, err
}

const updateDiamond = `-- name: UpdateDiamond :one
UPDATE gems
SET diamond = diamond + $3
WHERE user_id = $1 AND guild_id = $2
RETURNING user_id, guild_id, diamond
`

type UpdateDiamondParams struct {
	UserID  int64
	GuildID int64
	Diamond int32
}

type UpdateDiamondRow struct {
	UserID  int64
	GuildID int64
	Diamond int32
}

func (q *Queries) UpdateDiamond(ctx context.Context, arg UpdateDiamondParams) (UpdateDiamondRow, error) {
	row := q.db.QueryRow(ctx, updateDiamond, arg.UserID, arg.GuildID, arg.Diamond)
	var i UpdateDiamondRow
	err := row.Scan(&i.UserID, &i.GuildID, &i.Diamond)
	return i, err
}

const updateGarnet = `-- name: UpdateGarnet :one
UPDATE gems
SET garnet = garnet + $3
WHERE user_id = $1 AND guild_id = $2
RETURNING user_id, guild_id, garnet
`

type UpdateGarnetParams struct {
	UserID  int64
	GuildID int64
	Garnet  int32
}

type UpdateGarnetRow struct {
	UserID  int64
	GuildID int64
	Garnet  int32
}

func (q *Queries) UpdateGarnet(ctx context.Context, arg UpdateGarnetParams) (UpdateGarnetRow, error) {
	row := q.db.QueryRow(ctx, updateGarnet, arg.UserID, arg.GuildID, arg.Garnet)
	var i UpdateGarnetRow
	err := row.Scan(&i.UserID, &i.GuildID, &i.Garnet)
	return i, err
}

const updateJade = `-- name: UpdateJade :one
UPDATE gems
SET jade = jade + $3
WHERE user_id = $1 AND guild_id = $2
RETURNING user_id, guild_id, jade
`

type UpdateJadeParams struct {
	UserID  int64
	GuildID int64
	Jade    int32
}

type UpdateJadeRow struct {
	UserID  int64
	GuildID int64
	Jade    int32
}

func (q *Queries) UpdateJade(ctx context.Context, arg UpdateJadeParams) (UpdateJadeRow, error) {
	row := q.db.QueryRow(ctx, updateJade, arg.UserID, arg.GuildID, arg.Jade)
	var i UpdateJadeRow
	err := row.Scan(&i.UserID, &i.GuildID, &i.Jade)
	return i, err
}

const updateKunzite = `-- name: UpdateKunzite :one
UPDATE gems
SET kunzite = kunzite + $3
WHERE user_id = $1 AND guild_id = $2
RETURNING user_id, guild_id, kunzite
`

type UpdateKunziteParams struct {
	UserID  int64
	GuildID int64
	Kunzite int32
}

type UpdateKunziteRow struct {
	UserID  int64
	GuildID int64
	Kunzite int32
}

func (q *Queries) UpdateKunzite(ctx context.Context, arg UpdateKunziteParams) (UpdateKunziteRow, error) {
	row := q.db.QueryRow(ctx, updateKunzite, arg.UserID, arg.GuildID, arg.Kunzite)
	var i UpdateKunziteRow
	err := row.Scan(&i.UserID, &i.GuildID, &i.Kunzite)
	return i, err
}

const updatePainite = `-- name: UpdatePainite :one
UPDATE gems
SET painite = painite + $3
WHERE user_id = $1 AND guild_id = $2
RETURNING user_id, guild_id, painite
`

type UpdatePainiteParams struct {
	UserID  int64
	GuildID int64
	Painite int32
}

type UpdatePainiteRow struct {
	UserID  int64
	GuildID int64
	Painite int32
}

func (q *Queries) UpdatePainite(ctx context.Context, arg UpdatePainiteParams) (UpdatePainiteRow, error) {
	row := q.db.QueryRow(ctx, updatePainite, arg.UserID, arg.GuildID, arg.Painite)
	var i UpdatePainiteRow
	err := row.Scan(&i.UserID, &i.GuildID, &i.Painite)
	return i, err
}

const updatePeridot = `-- name: UpdatePeridot :one
UPDATE gems
SET peridot = peridot + $3
WHERE user_id = $1 AND guild_id = $2
RETURNING user_id, guild_id, peridot
`

type UpdatePeridotParams struct {
	UserID  int64
	GuildID int64
	Peridot int32
}

type UpdatePeridotRow struct {
	UserID  int64
	GuildID int64
	Peridot int32
}

func (q *Queries) UpdatePeridot(ctx context.Context, arg UpdatePeridotParams) (UpdatePeridotRow, error) {
	row := q.db.QueryRow(ctx, updatePeridot, arg.UserID, arg.GuildID, arg.Peridot)
	var i UpdatePeridotRow
	err := row.Scan(&i.UserID, &i.GuildID, &i.Peridot)
	return i, err
}

const updateRuby = `-- name: UpdateRuby :one
UPDATE gems
SET ruby = ruby + $3
WHERE user_id = $1 AND guild_id = $2
RETURNING user_id, guild_id, ruby
`

type UpdateRubyParams struct {
	UserID  int64
	GuildID int64
	Ruby    int32
}

type UpdateRubyRow struct {
	UserID  int64
	GuildID int64
	Ruby    int32
}

func (q *Queries) UpdateRuby(ctx context.Context, arg UpdateRubyParams) (UpdateRubyRow, error) {
	row := q.db.QueryRow(ctx, updateRuby, arg.UserID, arg.GuildID, arg.Ruby)
	var i UpdateRubyRow
	err := row.Scan(&i.UserID, &i.GuildID, &i.Ruby)
	return i, err
}

const updateSapphire = `-- name: UpdateSapphire :one
UPDATE gems
SET sapphire = sapphire + $3
WHERE user_id = $1 AND guild_id = $2
RETURNING user_id, guild_id, sapphire
`

type UpdateSapphireParams struct {
	UserID   int64
	GuildID  int64
	Sapphire int32
}

type UpdateSapphireRow struct {
	UserID   int64
	GuildID  int64
	Sapphire int32
}

func (q *Queries) UpdateSapphire(ctx context.Context, arg UpdateSapphireParams) (UpdateSapphireRow, error) {
	row := q.db.QueryRow(ctx, updateSapphire, arg.UserID, arg.GuildID, arg.Sapphire)
	var i UpdateSapphireRow
	err := row.Scan(&i.UserID, &i.GuildID, &i.Sapphire)
	return i, err
}

const updateSunstone = `-- name: UpdateSunstone :one
UPDATE gems
SET sunstone = sunstone + $3
WHERE user_id = $1 AND guild_id = $2
RETURNING user_id, guild_id, sunstone
`

type UpdateSunstoneParams struct {
	UserID   int64
	GuildID  int64
	Sunstone int32
}

type UpdateSunstoneRow struct {
	UserID   int64
	GuildID  int64
	Sunstone int32
}

func (q *Queries) UpdateSunstone(ctx context.Context, arg UpdateSunstoneParams) (UpdateSunstoneRow, error) {
	row := q.db.QueryRow(ctx, updateSunstone, arg.UserID, arg.GuildID, arg.Sunstone)
	var i UpdateSunstoneRow
	err := row.Scan(&i.UserID, &i.GuildID, &i.Sunstone)
	return i, err
}

const updateTopaz = `-- name: UpdateTopaz :one
UPDATE gems
SET topaz = topaz + $3
WHERE user_id = $1 AND guild_id = $2
RETURNING user_id, guild_id, topaz
`

type UpdateTopazParams struct {
	UserID  int64
	GuildID int64
	Topaz   int32
}

type UpdateTopazRow struct {
	UserID  int64
	GuildID int64
	Topaz   int32
}

func (q *Queries) UpdateTopaz(ctx context.Context, arg UpdateTopazParams) (UpdateTopazRow, error) {
	row := q.db.QueryRow(ctx, updateTopaz, arg.UserID, arg.GuildID, arg.Topaz)
	var i UpdateTopazRow
	err := row.Scan(&i.UserID, &i.GuildID, &i.Topaz)
	return i, err
}
