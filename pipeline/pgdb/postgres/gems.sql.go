// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: gems.sql

package postgres

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO gems (user_id, guild_id, diamond, sunstone, citrine, topaz, peridot, jade, aquamarine, sapphire, amethyst, kunzite, ruby, garnet, painite)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15)
RETURNING user_id, guild_id, diamond, sunstone, citrine, topaz, peridot, jade, aquamarine, sapphire, amethyst, kunzite, ruby, garnet, painite
`

type CreateUserParams struct {
	UserID     int64
	GuildID    int64
	Diamond    int32
	Sunstone   int32
	Citrine    int32
	Topaz      int32
	Peridot    int32
	Jade       int32
	Aquamarine int32
	Sapphire   int32
	Amethyst   int32
	Kunzite    int32
	Ruby       int32
	Garnet     int32
	Painite    int32
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Gem, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.UserID,
		arg.GuildID,
		arg.Diamond,
		arg.Sunstone,
		arg.Citrine,
		arg.Topaz,
		arg.Peridot,
		arg.Jade,
		arg.Aquamarine,
		arg.Sapphire,
		arg.Amethyst,
		arg.Kunzite,
		arg.Ruby,
		arg.Garnet,
		arg.Painite,
	)
	var i Gem
	err := row.Scan(
		&i.UserID,
		&i.GuildID,
		&i.Diamond,
		&i.Sunstone,
		&i.Citrine,
		&i.Topaz,
		&i.Peridot,
		&i.Jade,
		&i.Aquamarine,
		&i.Sapphire,
		&i.Amethyst,
		&i.Kunzite,
		&i.Ruby,
		&i.Garnet,
		&i.Painite,
	)
	return i, err
}
